/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v2.1/applications": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["applicationsList"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/applications/{clientId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * TODO
     * @description TODO
     */
    delete: operations["applicationsRevoke"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/basicconfig": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Basic application configuration
     * @description Get basic application configuration.
     */
    get: operations["basicConfig"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/changelog": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["changelog"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/changelog/opened": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * TODO
     * @description TODO
     */
    post: operations["changelogOpened"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/changelog/seen": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * TODO
     * @description TODO
     */
    post: operations["changelogSeen"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/devices": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["devices"];
    put?: never;
    /**
     * TODO
     * @description TODO
     */
    post: operations["devicesNew"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/devices/{deviceId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["devicesDetails"];
    /**
     * TODO
     * @description TODO
     */
    put: operations["devicesEdit"];
    post?: never;
    /**
     * TODO
     * @description TODO
     */
    delete: operations["devicesDelete"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/devices/{deviceId}/reauth": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["devicesReauth"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/devices/{deviceId}/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * TODO
     * @description TODO
     */
    put: operations["devicesEditSearch"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/groups": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["groups"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/groups/{groupId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["groupsDetails"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/groups/{groupId}/attributes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["groupsAttributes"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/groups/{groupId}/branding/logo": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * TODO
     * @description TODO
     */
    delete: operations["groupsBrandingLogoRemove"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/groups/{groupId}/common": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * TODO
     * @description TODO
     */
    put: operations["groupsCommonEdit"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/groups/{groupId}/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * TODO
     * @description TODO
     */
    post: operations["groupsUsersAdd"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/groups/{groupId}/users/{groupUserId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * TODO
     * @description TODO
     */
    put: operations["groupsUsersEdit"];
    post?: never;
    /**
     * TODO
     * @description TODO
     */
    delete: operations["groupsUsersRemove"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/jobs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["jobs"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/jobs/completed": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * TODO
     * @description TODO
     */
    delete: operations["jobsRemoveCompleted"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/jobs/files/copy": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * TODO
     * @description TODO
     */
    post: operations["jobsFilesCopy"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/jobs/files/importlink": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * TODO
     * @description TODO
     */
    post: operations["jobsFilesImportLink"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/jobs/files/move": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * TODO
     * @description TODO
     */
    post: operations["jobsFilesMove"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/jobs/files/remove": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * TODO
     * @description TODO
     */
    post: operations["jobsFilesRemove"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/jobs/files/restoresnapshot": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * TODO
     * @description TODO
     */
    post: operations["jobsFilesRestoreSnapshot"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/jobs/{jobId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["jobsDetails"];
    put?: never;
    post?: never;
    /**
     * TODO
     * @description TODO
     */
    delete: operations["jobsRemove"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/jobs/{jobId}/abort": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * TODO
     * @description TODO
     */
    put: operations["jobsAbort"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/links": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["linksAll"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List of places and shared folders.
     * @deprecated
     * @description Deprecated. Use Places or Shared.
     */
    get: operations["mounts"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["mountsDetails"];
    /**
     * TODO
     * @description TODO
     */
    put: operations["mountsEdit"];
    post?: never;
    /**
     * TODO
     * @description TODO
     */
    delete: operations["mountsDelete"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/bundle": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["bundle"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/comments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["comments"];
    put?: never;
    /**
     * TODO
     * @description TODO
     */
    post: operations["commentsNew"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/comments/range": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["commentsRange"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/comments/{commentId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["commentsDetails"];
    put?: never;
    post?: never;
    /**
     * TODO
     * @description TODO
     */
    delete: operations["commentsDelete"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/files/copy": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * TODO
     * @description TODO
     */
    put: operations["filesCopy"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/files/create/{template}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * TODO
     * @description TODO
     */
    put: operations["filesCreate"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/files/download": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["filesGetLink"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/files/external": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["filesExternal"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/files/externalstatus": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["filesExternalStatus"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/files/folder": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * TODO
     * @description TODO
     */
    post: operations["filesFolderNew"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/files/get": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["filesGet"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/files/info": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["filesInfo"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/files/list": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["filesList"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/files/move": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * TODO
     * @description TODO
     */
    put: operations["filesMove"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/files/remove": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * TODO
     * @description TODO
     */
    delete: operations["filesRemove"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/files/rename": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * TODO
     * @description TODO
     */
    put: operations["filesRename"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/files/tags/add": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * TODO
     * @description TODO
     */
    post: operations["filesTagsAdd"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/files/tags/remove": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * TODO
     * @description TODO
     */
    post: operations["filesTagsRemove"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/files/tags/set": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * TODO
     * @description TODO
     */
    post: operations["filesTagsSet"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/files/upload": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["filesUpload"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/files/versions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["filesVersions"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/files/versions/change": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Change file version
     * @description Replace a file with an older version
     */
    post: operations["filesChangeVersion"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/files/versions/recover": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * TODO
     * @description TODO
     */
    post: operations["filesVersionsRecover"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/groups/{mountGroupId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * TODO
     * @description TODO
     */
    put: operations["mountsGroupsAdd"];
    post?: never;
    /**
     * TODO
     * @description TODO
     */
    delete: operations["mountsGroupsRemove"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/links": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["links"];
    put?: never;
    /**
     * TODO
     * @description TODO
     */
    post: operations["linksCreate"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/links/{linkId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["linksDetails"];
    put?: never;
    post?: never;
    /**
     * TODO
     * @description TODO
     */
    delete: operations["linksDelete"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/links/{linkId}/counter": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["linksCounter"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/links/{linkId}/downloadable": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * TODO
     * @description TODO
     */
    put: operations["linksSetDownloadable"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/links/{linkId}/message": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * TODO
     * @description TODO
     */
    put: operations["linksSetMessage"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/links/{linkId}/password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * TODO
     * @description TODO
     */
    delete: operations["linksRemovePassword"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/links/{linkId}/password/reset": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * TODO
     * @description TODO
     */
    put: operations["linksResetPassword"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/links/{linkId}/password/set": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * TODO
     * @description TODO
     */
    put: operations["linksSetPassword"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/links/{linkId}/qr": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["linksQr"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/links/{linkId}/urlHash": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * TODO
     * @description TODO
     */
    put: operations["linksSetUrlHash"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/links/{linkId}/validity": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * TODO
     * @description TODO
     */
    put: operations["linksSetValidity"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/reauth": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["mountsReauth"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/receivers": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["receivers"];
    put?: never;
    /**
     * TODO
     * @description TODO
     */
    post: operations["receiversCreate"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/receivers/{receiverId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["receiversDetails"];
    put?: never;
    post?: never;
    /**
     * TODO
     * @description TODO
     */
    delete: operations["receiversDelete"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/receivers/{receiverId}/alert": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * TODO
     * @description TODO
     */
    put: operations["receiversSetAlert"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/receivers/{receiverId}/message": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * TODO
     * @description TODO
     */
    put: operations["receiversSetMessage"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/receivers/{receiverId}/password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * TODO
     * @description TODO
     */
    delete: operations["receiversRemovePassword"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/receivers/{receiverId}/password/reset": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * TODO
     * @description TODO
     */
    put: operations["receiversResetPassword"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/receivers/{receiverId}/password/set": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * TODO
     * @description TODO
     */
    put: operations["receiversSetPassword"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/receivers/{receiverId}/qr": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["receiversQr"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/receivers/{receiverId}/urlHash": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * TODO
     * @description TODO
     */
    put: operations["receiversSetUrlHash"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/receivers/{receiverId}/validity": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * TODO
     * @description TODO
     */
    put: operations["receiversSetValidity"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/submounts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * TODO
     * @description TODO
     */
    post: operations["mountsSubmountsCreate"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * TODO
     * @description TODO
     */
    post: operations["mountsUsersAdd"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/mounts/{mountId}/users/{mountUserId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * TODO
     * @description TODO
     */
    put: operations["mountsUsersEdit"];
    post?: never;
    /**
     * TODO
     * @description TODO
     */
    delete: operations["mountsUsersRemove"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/places": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["places"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/receivers": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["receiversAll"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search files and folders
     * @description Search returns search results in the `hits` list. Mounts are normalized and present on the root level to minimize the response size.
     */
    get: operations["search"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/shared": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["shared"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/shared/{mountId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["sharedDetails"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/snapshots": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["snapshots"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/trash": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get deleted files
     * @description TODO
     */
    get: operations["trash"];
    put?: never;
    post?: never;
    /**
     * Empty trash
     * @description TODO
     */
    delete: operations["trashEmpty"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/trash/undelete": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Undelete files from trash
     * @description TODO
     */
    post: operations["trashUndelete"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/user": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Current user info
     * @description Get current user's info.
     */
    get: operations["user"];
    /**
     * Update current user
     * @description Update current user's info.
     */
    put: operations["userEdit"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/user/activity": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["activity"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/user/appconfig": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Application configuration and feature flags for the current user
     * @description Most of the configuration is only useful for the official apps. For unauthenticated users `Basic config` should be used.
     */
    get: operations["userAppConfig"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/user/apw": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["appPasswordsList"];
    /**
     * TODO
     * @description TODO
     */
    put: operations["appPasswordsGenerate"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/user/apw/{apwId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * TODO
     * @description TODO
     */
    delete: operations["appPasswordsRevoke"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/user/attributes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["userAttributes"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/user/authenticated": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["userAuthenticated"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/user/bookmarks": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["bookmarks"];
    /**
     * TODO
     * @description TODO
     */
    put: operations["bookmarksEdit"];
    /**
     * TODO
     * @description TODO
     */
    post: operations["bookmarksCreate"];
    /**
     * TODO
     * @description TODO
     */
    delete: operations["bookmarksRemove"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/user/changeemail": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * TODO
     * @description TODO
     */
    put: operations["userChangeEmail"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/user/connections": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Connected users and groups
     * @description A list of connected users and groups. This can be used for sharing user and group pickers.
     */
    get: operations["connections"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/user/password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * TODO
     * @description TODO
     */
    put: operations["userChangePassword"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/user/settings/branding/logo": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Remove the current user's branding logo.
     * @description Remove the current user's branding logo.
     */
    delete: operations["brandingLogoRemove"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/user/settings/language": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get current preferred language
     * @description Get current preferred language. `User / App config` endpoint should be used for the current language (preferred, detected or default).
     */
    get: operations["settingsLanguage"];
    /**
     * Update current preferred language
     * @description Set current preferred language. Valid languages can be obtained using `User / App config` endpoint.
     */
    put: operations["settingsLanguageEdit"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/user/settings/notifications": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get notifications settings
     * @description Notification settings control whether the user wants to receive an email when new files are shared or a new comment is posted. Device offline setting is deprecated.
     */
    get: operations["settingsNotifications"];
    /**
     * Update notification settings
     * @description Notification settings control whether the user wants to receive an email when new files are shared or a new comment is posted.
     */
    put: operations["settingsNotificationsEdit"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/user/settings/security": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get security settings
     * @description Security settings are used to control automatic or mandatory passwords for links.
     */
    get: operations["settingsSecurity"];
    /**
     * Update security settings
     * @description Security settings are used to control automatic or mandatory passwords for links.
     */
    put: operations["settingsSecurityEdit"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v2.1/user/settings/seen": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get seen settings
     * @description Seen settings are used for saving whether the current user has already seen the web Intro or Desktop app tip.
     */
    get: operations["settingsSeen"];
    /**
     * Update seen settings
     * @description Seen settings are used for saving whether the current user has already seen the web Intro or Desktop app tip. For partial updates non-changed fields should be `null`.
     */
    put: operations["settingsSeenEdit"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/content/api/v2.1/files/get": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Download multiple files in a ZIP archive
     * @description Download multiple files in a ZIP archive.
     */
    post: operations["filesContentFilesGetMulti"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/content/api/v2.1/files/get/{name}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Download multiple files in a ZIP archive
     * @description Helper endpoint to include the name of the ZIP archive because web browsers use the last segment of the URL for the downloaded file name.
     */
    post: operations["filesContentFilesGetMultiName"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/content/api/v2.1/groups/{groupId}/branding/logo": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get the group's branding logo
     * @description Response image can be a JPEG, PNG or GIF.
     */
    get: operations["groupsContentGroupsBrandingLogo"];
    put?: never;
    /**
     * Update the group's branding logo.
     * @description The uploaded image must be smaller than 8 MB and will be automatically resized.
     */
    post: operations["groupsContentGroupsBrandingLogoUpdate"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/content/api/v2.1/mounts/{mountId}/files/get": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Download a file
     * @description Download a file.
     */
    get: operations["filesContentFilesGet"];
    put?: never;
    /**
     * Download a folder with filtered files
     * @description Download a folder with filtered files.
     */
    post: operations["filesContentFilesGetPost"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/content/api/v2.1/mounts/{mountId}/files/get/{name}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Download a file
     * @description Helper endpoint to include the name of the file because web browsers use the last segment of the URL for the downloaded file name.
     */
    get: operations["filesContentFilesGetName"];
    put?: never;
    /**
     * Download a folder with filtered files
     * @description Helper endpoint to include the name of the file because web browsers use the last segment of the URL for the downloaded file name.
     */
    post: operations["filesContentFilesGetNamePost"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/content/api/v2.1/mounts/{mountId}/files/listrecursive": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a recursive stream of files and folders
     * @description
     *     Get a recursive stream of files and folders.
     *
     *     ## Example response
     *
     *     ```json
     *     > GET /content/api/v2.1/mounts/f13b5804-563d-4aed-b831-ca0246a1cad1/files/listrecursive?path=/path/to/dir HTTP/1.1
     *     >
     *     < HTTP/1.1 200 OK
     *     < Content-Type: application/x-ndjson; charset=utf-8
     *     < Transfer-Encoding: chunked
     *     <
     *     {"type":"file","path":"/","file":{"name":"1","type":"dir","modified":1487861241075,"size":0,"contentType":"","tags":{}}}
     *     {"type":"file","path":"/01ab.jpg","file":{"name":"01ab.jpg","type":"file","modified":1494936799097,"size":36494,"contentType":"image/jpeg","hash":"2eedb741f199ecc19f1ba815d3d9914d","tags":{}}}
     *     {"type":"file","path":"/10 (1).txt","file":{"name":"10 (1).txt","type":"file","modified":1559913936402,"size":3,"contentType":"text/plain","hash":"31d30eea8d0968d6458e0ad0027c9f80","tags":{}}}
     *     {"type":"file","path":"/2","file":{"name":"2","type":"dir","modified":1487861247967,"size":0,"contentType":"","tags":{}}}
     *     {"type":"file","path":"/2/3","file":{"name":"3","type":"dir","modified":1487861253650,"size":0,"contentType":"","tags":{}}}
     *     ```
     *
     *     ## Example response for an offline device
     *
     *     ```json
     *     > GET /content/api/v2.1/mounts/f13b5804-563d-4aed-b831-ca0246a1cad1/files/listrecursive?path=/path/to/dir HTTP/1.1
     *     >
     *     < HTTP/1.1 404 Not Found
     *     < Content-Length: 115
     *     < Content-Type: application/json; charset=utf-8
     *     <
     *     {"error":{"code":"DeviceOffline","message":"Device is offline"},"requestId":"7d17fa00-eea6-40d6-4ea8-4ef1496530ae"}
     *     ```
     *
     *     ## External devices
     *
     *     For external cloud devices list recursive only works if the device is
     *     synchronized. If the device is not synchronized the error code will be `FilesNotSynced`.
     *
     *     ## Errors
     *
     *     If an error occurs when list items have already been sent the response will end
     *     with an error item:
     *
     *     ```json
     *     > GET /content/api/v2.1/mounts/f13b5804-563d-4aed-b831-ca0246a1cad1/files/listrecursive?path=/path/to/dir HTTP/1.1
     *     >
     *     < HTTP/1.1 200 OK
     *     < Content-Type: application/x-ndjson; charset=utf-8
     *     < Transfer-Encoding: chunked
     *     <
     *     {"type":"file","path":"/","file":{"name":"","type":"dir","modified":1578316978020,"size":0,"contentType":"","tags":{}}}
     *     {"type":"file","path":"/.bin","file":{"name":".bin","type":"dir","modified":1578316950052,"size":0,"contentType":"","tags":{}}}
     *     {"type":"file","path":"/.bin/JSONStream","file":{"name":"JSONStream","type":"file","modified":1578316950024,"size":20,"contentType":"application/octet-stream","tags":{}}}
     *     {"type":"error","error":{"code":"DeviceOffline","message":"Device is offline"}}
     *     ```
     *
     *     ## Paths
     *
     *     All paths in items are relative to the specified path. The first item is always
     *     an file info for the specified path which means that the first item will always
     *     have path `/`.
     *
     */
    get: operations["filesContentFilesListRecursive"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/content/api/v2.1/mounts/{mountId}/files/put": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Upload a file
     * @description File can be uploaded either using a multi-part form or directly. You can use Chunked transfer encoding if the size of the file is not known in advance (streaming upload).
     */
    post: operations["filesContentFilesPut"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/content/api/v2.1/user/profile-picture": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get user's profile picture
     * @description Response image can be a JPEG, PNG or GIF.
     */
    get: operations["userProfilePictureContentProfilePicture"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/content/api/v2.1/user/profile-picture/update": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Update user's profile picture.
     * @description The uploaded image must be smaller than 8 MB and will be automatically resized.
     */
    post: operations["userProfilePictureContentProfilePictureUpdate"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/content/api/v2.1/user/settings/branding/logo": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get the current user's branding logo
     * @description Response image can be a JPEG, PNG or GIF.
     */
    get: operations["brandingContentBrandingLogo"];
    put?: never;
    /**
     * Update the current user's branding logo.
     * @description The uploaded image must be smaller than 8 MB and will be automatically resized.
     */
    post: operations["brandingContentBrandingLogoUpdate"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/content/api/v2.1/users/{userId}/profile-picture": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a user's profile picture
     * @description Response image can be a JPEG, PNG or GIF.
     */
    get: operations["usersProfilePictureContentProfilePicture"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/ip": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["clientIp"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/oauth2/devicecode": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * OAuth 2.0 Device Code Endpoint
     * @description OAuth 2.0 endpoint for obtaining device code.
     */
    post: operations["oauth2DeviceCode"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/oauth2/token": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * OAuth 2.0 Token Endpoint
     * @description This endpoint should not be used called manually. An OAuth 2 library should be used for calls to this endpoint.
     */
    post: operations["oauth2Token"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/profile": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * TODO
     * @description TODO
     */
    get: operations["profile"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Activity: {
      activity: {
        [key: string]: unknown;
      }[];
    };
    /** @description ApiError represents API errors. Used when an API throws an error, typically with a HTTP error response-code (3xx, 4xx, 5xx). */
    ApiError: {
      error: components["schemas"]["ApiErrorDetails"];
      /**
       * @description RequestID is the unique ID of the request
       * @example 12341234-1234-1234-1234-123412341234
       */
      requestId: string;
    };
    /** @description ApiErrorDetails represents API error details */
    ApiErrorDetails: {
      /**
       * @description Code is the application relevant detail defined in the API or a common list.
       * @example NotFound
       */
      code: string;
      /** @description Extra is extra error info. */
      extra?: {
        [key: string]:
          | {
              [key: string]: unknown;
            }
          | undefined;
      };
      /**
       * @description Message is the explanation of the error which can be shown to the client user.
       * @example User could not be found
       */
      message: string;
    };
    /** @description AppConfig represents user application configuration. */
    AppConfig: {
      assets: components["schemas"]["ConfigAssets"];
      branding: components["schemas"]["ConfigBranding"];
      changelog: components["schemas"]["ConfigChangelog"];
      chromeExtension: components["schemas"]["ConfigChromeExtension"];
      emailChange: components["schemas"]["ConfigEmailChange"];
      external: components["schemas"]["ConfigExternal"];
      /**
       * @description Extra contains extra settings.
       * @example {
       *       "subscription": {
       *         "hasIndividualAccount": true,
       *         "isPayingUser": true
       *       }
       *     }
       */
      extra: string;
      featureFlags: components["schemas"]["ConfigFeatureFlags"];
      frontend: components["schemas"]["ConfigFrontend"];
      groups: components["schemas"]["ConfigGroups"];
      localization: components["schemas"]["ConfigLocalization"];
      logout: components["schemas"]["ConfigLogout"];
      mobile: components["schemas"]["ConfigMobile"];
      mobileApps: components["schemas"]["ConfigMobileApps"];
      oauth2: components["schemas"]["ConfigOAuth2"];
      office: components["schemas"]["ConfigOffice"];
      passwordChange: components["schemas"]["ConfigPasswordChange"];
      product: components["schemas"]["ConfigProduct"];
      search: components["schemas"]["ConfigSearch"];
      snapshots: components["schemas"]["ConfigSnapshots"];
      storageDownloader: components["schemas"]["ConfigStorageDownloader"];
      templates: components["schemas"]["ConfigTemplates"];
      trash: components["schemas"]["ConfigTrash"];
      user: components["schemas"]["ConfigUser"];
      viewer: components["schemas"]["ConfigViewer"];
    };
    AppInstance: {
      clientId: string;
      /** Format: int64 */
      createdAt: number;
      id: string;
      name: string;
      redirectUri?: string;
      scopes: string[];
      userAgent?: string;
    };
    AppInstances: {
      apps: components["schemas"]["AppInstance"][];
    };
    AppPassword: {
      /** Format: int64 */
      created: number;
      id: string;
      /** Format: int64 */
      lastUsed: number;
      name: string;
      plain?: string;
      scopes: string[];
    };
    AppPasswordGenerate: {
      name: string;
      scopes: string[];
    };
    AppPasswords: {
      passwords: components["schemas"]["AppPassword"][];
    };
    /** @description BasicConfig represents basic application configuration. */
    BasicConfig: {
      assets: components["schemas"]["ConfigAssets"];
      frontend: components["schemas"]["BasicConfigFrontend"];
      localization: components["schemas"]["ConfigLocalization"];
      mobile: components["schemas"]["ConfigMobile"];
      product: components["schemas"]["ConfigProduct"];
    };
    /** @description BasicConfigFrontend represents frontend settings. */
    BasicConfigFrontend: {
      mfa: components["schemas"]["ConfigFrontendMfa"];
    };
    Bookmark: {
      mountId: string;
      name: string;
      path: string;
    };
    Bookmarks: {
      bookmarks: components["schemas"]["Bookmark"][];
    };
    Bundle: {
      file: components["schemas"]["BundleFile"];
      files?: components["schemas"]["BundleFile"][];
    };
    BundleBookmark: {
      name: string;
      path: string;
    };
    BundleFile: {
      bookmark?: components["schemas"]["BundleBookmark"];
      contentType: string;
      hash?: string;
      link?: components["schemas"]["Link"];
      /** Format: int64 */
      modified: number;
      mount?: components["schemas"]["Mount"];
      mountPath?: string;
      name: string;
      receiver?: components["schemas"]["Receiver"];
      /** Format: int64 */
      size: number;
      tags: {
        [key: string]: string[] | undefined;
      };
      type: string;
      vaultRepo?: components["schemas"]["BundleVaultRepo"];
    };
    BundleVaultRepo: {
      /** Format: int64 */
      added: number;
      id: string;
      mountId: string;
      name: string;
      path: string;
    };
    Changelog: {
      items: components["schemas"]["ChangelogItem"][];
      url: string;
    };
    ChangelogItem: {
      category?: string;
      categoryColor?: string;
      id: string;
      link: string;
      opened: boolean;
      /** Format: int64 */
      published: number;
      seen: boolean;
      summary: string;
      title: string;
    };
    ChangelogOpened: {
      ids: string[];
    };
    ChangelogSeen: {
      ids: string[];
    };
    Comment: {
      /** Format: int64 */
      added: number;
      content: string;
      id: string;
      user?: components["schemas"]["UserInfo"];
    };
    CommentCreate: {
      content: string;
    };
    Comments: {
      comments: components["schemas"]["Comment"][];
    };
    /** @description ConfigAssets is deprecated. */
    ConfigAssets: {
      /** @description Base is deprecated. */
      base: string;
    };
    /** @description ConfigBranding represents branding settings. */
    ConfigBranding: {
      user: components["schemas"]["ConfigBrandingUser"];
    };
    /** @description ConfigBrandingUser represents user branding settings. */
    ConfigBrandingUser: {
      /**
       * @description Enabled defines whether user can change branding settings.
       * @example true
       */
      enabled: boolean;
    };
    /** @description ConfigChangelog represents feature flags settings. */
    ConfigChangelog: {
      /** @description Enabled defines whether changelog is enabled. */
      enabled: boolean;
    };
    /** @description ConfigMobileApps represents Chrome extension settings. */
    ConfigChromeExtension: {
      /**
       * @description Id is the Chrome extension ID.
       * @example cgigbdaddgndbofikanbfmkpfoonlbpp
       */
      id: string;
      /**
       * @description Offer defines whether Chrome extension banner should be displayed.
       * @example true
       */
      offer: boolean;
    };
    /** @description ConfigPasswordChange represents email change settings. */
    ConfigEmailChange: {
      /**
       * @description Enable defines whether user can change their email.
       * @example true
       */
      enabled: boolean;
    };
    /** @description ConfigExternal represents external cloud integration settings. */
    ConfigExternal: {
      cloudDrive: components["schemas"]["ConfigExternalCloudDrive"];
      dropbox: components["schemas"]["ConfigExternalDropbox"];
      googleDrive: components["schemas"]["ConfigExternalGoogleDrive"];
      oneDrive: components["schemas"]["ConfigExternalOneDrive"];
    };
    /** @description ConfigExternalCloudDrive is deprecated. */
    ConfigExternalCloudDrive: {
      /** @description ConnectUrl is deprecated. */
      connectUrl: string;
      /** @description Enabled is deprecated. */
      enabled: boolean;
    };
    /** @description ConfigExternalDropbox represents Dropbox integration settings. */
    ConfigExternalDropbox: {
      /**
       * @description ConnectUrl is the URL for connecting new Dropbox places.
       * @example /places/dropbox/connect
       */
      connectUrl: string;
      /**
       * @description Enabled defines whether Dropbox integration is enabled.
       * @example true
       */
      enabled: boolean;
      /**
       * @description ConnectUrl is the URL for Dropbox user logout.
       * @example https://www.dropbox.com/logout
       */
      logoutUrl: string;
    };
    /** @description ConfigExternalGoogleDrive represents Google Drive integration settings. */
    ConfigExternalGoogleDrive: {
      /**
       * @description ConnectUrl is the URL for connecting new Google Drive places.
       * @example /places/googledrive/connect
       */
      connectUrl: string;
      /**
       * @description Enabled defines whether Google Drive integration is enabled.
       * @example true
       */
      enabled: boolean;
      /**
       * @description ConnectUrl is the URL for Google Drive user logout.
       * @example https://accounts.google.com/Logout
       */
      logoutUrl: string;
    };
    /** @description ConfigExternalOneDrive represents OneDrive integration settings. */
    ConfigExternalOneDrive: {
      /**
       * @description ConnectUrl is the URL for connecting new OneDrive places.
       * @example /places/onedrive/connect
       */
      connectUrl: string;
      /**
       * @description Enabled defines whether OneDrive integration is enabled.
       * @example true
       */
      enabled: boolean;
    };
    /** @description ConfigFeatureFlags represents feature flags settings. */
    ConfigFeatureFlags: {
      /** @description FeatureFlags contains custom feature flags. */
      featureFlags: {
        [key: string]: boolean | undefined;
      };
    };
    /** @description ConfigFrontend represents frontend settings. */
    ConfigFrontend: {
      activity: components["schemas"]["ConfigFrontendActivity"];
      links: components["schemas"]["ConfigFrontendLinks"];
      mfa: components["schemas"]["ConfigFrontendMfa"];
      navigation: components["schemas"]["ConfigFrontendNavigation"];
      settings: components["schemas"]["ConfigFrontendSettings"];
      upgrade: components["schemas"]["ConfigFrontendUpgrade"];
    };
    /** @description ConfigFrontendActivity is deprecated. */
    ConfigFrontendActivity: {
      /** @description Pagination is deprecated. */
      pagination: boolean;
    };
    /** @description ConfigFrontendLinks represents links settings. */
    ConfigFrontendLinks: {
      /**
       * @description CanChangePassword defines whether link passwords can be changed.
       * @example true
       */
      canChangePassword: boolean;
      /**
       * @description CanChangeShortUrl defines whether short URLs can be changed.
       * @example true
       */
      canChangeShortUrl: boolean;
      /**
       * @description MessageEditEnabled defines whether current user is allowed to set a custom
       *     link message.
       * @example true
       */
      messageEditAllowed: boolean;
      /**
       * @description MessageEditEnabled defines whether custom link message feature is enabled.
       * @example true
       */
      messageEditEnabled: boolean;
      /**
       * @description SocialEnabled defines whether social media buttons are displayed.
       * @example true
       */
      socialEnabled: boolean;
    };
    /** @description ConfigFrontendMfa represents Two-factor authentication settings. */
    ConfigFrontendMfa: {
      /**
       * @description Enabled defines whether Two-factor authentication settings are enabled.
       * @example true
       */
      enabled: boolean;
    };
    /** @description ConfigFrontendNavigation represents navigation settings. */
    ConfigFrontendNavigation: {
      androidMedia: components["schemas"]["ConfigFrontendNavigationAndroidMedia"];
      iosMedia: components["schemas"]["ConfigFrontendNavigationIosMedia"];
      wpMedia: components["schemas"]["ConfigFrontendNavigationWpMedia"];
    };
    /** @description ConfigFrontendNavigationAndroidMedia represents Android media settings. */
    ConfigFrontendNavigationAndroidMedia: {
      /**
       * @description Name is the name of iOS media folder.
       * @example My Android Media
       */
      name: string;
    };
    /** @description ConfigFrontendNavigationIosMedia represents iOS media settings. */
    ConfigFrontendNavigationIosMedia: {
      /**
       * @description Name is the name of iOS media folder.
       * @example My iOS Media
       */
      name: string;
    };
    /** @description ConfigFrontendNavigationWpMedia is deprecated. */
    ConfigFrontendNavigationWpMedia: {
      /** @description Name is deprecated. */
      name: string;
    };
    /** @description ConfigFrontendSettings represents frontend settings. */
    ConfigFrontendSettings: {
      security: components["schemas"]["ConfigFrontendSettingsSecurity"];
    };
    /** @description ConfigFrontendSettingsSecurity represents frontend security settings. */
    ConfigFrontendSettingsSecurity: {
      /**
       * @description Enabled defines whether security page is enabled.
       * @example true
       */
      enabled: boolean;
    };
    /** @description ConfigFrontendUpgrade represents upgrade settings. */
    ConfigFrontendUpgrade: {
      /** @description Url is the URL of the account/upgrade settings. */
      url: string;
    };
    /** @description ConfigGroups represents group settings. */
    ConfigGroups: {
      /** @description AddUserUrl contains a custom URL for adding users. */
      addUserUrl?: string;
      /** @description BuyResourcesUrl contains a custom URL for buying more resources. */
      buyResourcesUrl?: string;
      /**
       * @description CanChangeSpace defines whether space can be assigned/modified for group users.
       * @example true
       */
      canChangeSpace: boolean;
      /**
       * @description CanChangeUsers defines whether group users can be modified.
       * @example true
       */
      canChangeUsers: boolean;
      /**
       * @description Enabled defines whether groups are enabled.
       * @example false
       */
      enabled: boolean;
    };
    /** @description ConfigLocalization represents localization settings. */
    ConfigLocalization: {
      /**
       * @description HelpLanguage is the language for the help pages.
       * @example en
       */
      helpLanguage: string;
      /**
       * @description Language is the current language code. If user did not set a preferred
       *     language, Accept-Language HTTP header is used for default language
       *     detection.
       * @example en
       */
      language: string;
      /** @description Languages is a list of languages for the web application. */
      languages: components["schemas"]["ConfigLocalizationLanguage"][];
    };
    /** @description ConfigLocalizationLanguage represents a web application language. */
    ConfigLocalizationLanguage: {
      /**
       * @description Language is a short code for the language.
       * @example en
       */
      language: string;
      /**
       * @description Name is the full name of the language.
       * @example English
       */
      name: string;
    };
    /** @description ConfigLogout represents logout settings. */
    ConfigLogout: {
      /**
       * @description Url is the URL for logout.
       * @example /logout
       */
      url: string;
    };
    /** @description ConfigMobile represents mobile settings. */
    ConfigMobile: {
      /**
       * @description IsMobile defines whether user is using a mobile device. It is detected from
       *     User-Agent header.
       * @example false
       */
      isMobile: boolean;
    };
    /** @description ConfigMobileApps represents mobile apps settings. */
    ConfigMobileApps: {
      android: components["schemas"]["ConfigMobileAppsAndroid"];
      ios: components["schemas"]["ConfigMobileAppsIos"];
      wp: components["schemas"]["ConfigMobileAppsWp"];
    };
    /** @description ConfigMobileAppsAndroid represents Android app settings. */
    ConfigMobileAppsAndroid: {
      /**
       * @description AppGalleryUrl is the URL of HUAWEI AppGallery.
       * @example https://appgallery.huawei.com/#/app/C102050115
       */
      appGalleryUrl?: string;
      /**
       * @description Url is the URL of Google Play store.
       * @example https://play.google.com/store/apps/details?id=net.koofr.app
       */
      url: string;
    };
    /** @description ConfigMobileAppsIos represents iOS app settings. */
    ConfigMobileAppsIos: {
      /**
       * @description Url is the URL of Apple App store.
       * @example https://itunes.apple.com/tr/app/koofr/id714802401
       */
      url: string;
    };
    /** @description ConfigMobileAppsWp is deprecated. */
    ConfigMobileAppsWp: {
      /** @description Url is deprecated. */
      url: string;
    };
    /** @description ConfigOAuth2 is deprecated. */
    ConfigOAuth2: {
      /**
       * @description Enabled is deprecated.
       * @example true
       */
      enabled: boolean;
      /**
       * @description Visible is deprecated.
       * @example true
       */
      visible: boolean;
    };
    /** @description ConfigOffice represents Office integration settings. */
    ConfigOffice: {
      /**
       * @description Enabled defines whether Office Web Apps integration is enabled.
       * @example false
       */
      enabled: boolean;
      /**
       * @description Extensions is a list of file extensions for which Office integration is
       *     supported.
       * @example [
       *       "csv",
       *       "docx",
       *       "xlsx"
       *     ]
       */
      extensions: string[];
      /**
       * @description OfficeOnlineEnabled defines whether Office Online integration is allowed
       *     for the current user.
       * @example true
       */
      officeOnlineAllowed: boolean;
      /**
       * @description OfficeOnlineLocale is the default locale of the Office Online data (e.g.
       *     Excel numbers and dates locale).
       * @example en-US
       */
      officeOnlineDataLocale?: string;
      /**
       * @description OfficeOnlineEnabled defines whether Office Online integration is enabled.
       * @example true
       */
      officeOnlineEnabled: boolean;
      /**
       * @description OfficeOnlineLocale is the locale of the Office Online web interface.
       * @example en-US
       */
      officeOnlineLocale?: string;
    };
    /** @description ConfigPasswordChange represents password change settings. */
    ConfigPasswordChange: {
      /**
       * @description Enable defines whether user can change their password.
       * @example true
       */
      enabled: boolean;
    };
    /** @description ConfigProduct represents product info. */
    ConfigProduct: {
      /**
       * @description MarketingURL is the URL of the page that contains more info about the
       *     product. It is used for intro modal in the web application and in the link
       *     page footer.
       * @example https://koofr.eu
       */
      marketingUrl: string;
      /**
       * @description Name is the produt name.
       * @example Koofr
       */
      name: string;
      /**
       * @description NameVisible defines whether product name should be visible on auth pages.
       * @example false
       */
      nameVisible: boolean;
      /**
       * @description PublicUrl is the public URL of the service.
       * @example https://app.koofr.net
       */
      publicUrl: string;
    };
    /** @description ConfigSearch is deprecated. */
    ConfigSearch: {
      /**
       * @description Enabled is deprecated.
       * @example true
       */
      enabled: boolean;
      /**
       * @description Visible is deprecated.
       * @example true
       */
      visible: boolean;
    };
    /** @description ConfigSnapshots represents snapshots settings. */
    ConfigSnapshots: {
      /**
       * @description Enabled defines whether snapshots are enabled.
       * @example false
       */
      enabled: boolean;
    };
    /** @description ConfigStorageDownloader is deprecated. */
    ConfigStorageDownloader: {
      /** @description Public is deprecated. */
      public: string;
    };
    /** @description ConfigTemplates represents empty documents templates settings. */
    ConfigTemplates: {
      /**
       * @description Enabled defines whether empty documents templates are enabled.
       * @example true
       */
      enabled: boolean;
      /**
       * @description Templates is a list of empty documents templates.
       * @example [
       *       "docx",
       *       "xlsx",
       *       "pptx"
       *     ]
       */
      templates: string[];
    };
    /** @description ConfigTrash represents trash settings. */
    ConfigTrash: {
      /** @description EmptyEnabled defines whether trash can be emptied. */
      emptyEnabled: boolean;
    };
    /** @description ConfigUser represents the current user info. */
    ConfigUser: {
      /**
       * @description Email is the user's email address.
       * @example john@example.com
       */
      email: string;
      /**
       * @description FirstName is the user's first name. Can be empty.
       * @example John
       */
      firstName: string;
      /**
       * @description HasPassword defines if user's password is set. User can be without a
       *     password if they signed in with Google.
       * @example true
       */
      hasPassword: boolean;
      /**
       * @description Id is the user's unique ID.
       * @example 12341234-1234-1234-1234-123412341234
       */
      id: string;
      /**
       * @description LastName is the user's last name. Can be empty.
       * @example Suitcase
       */
      lastName: string;
      /**
       * Format: int32
       * @description Level is user's level.
       * @example 1000
       */
      level: number;
      /** @description PhoneNumber is the user's phone number. It is defined in special cases. */
      phoneNumber?: string;
    };
    /** @description ConfigViewer represents document viewer settings. */
    ConfigViewer: {
      /**
       * @description Enabled defines whether document viewer is enabled.
       * @example true
       */
      enabled: boolean;
    };
    Connections: {
      groups: components["schemas"]["ConnectionsGroup"][];
      users: components["schemas"]["ConnectionsUser"][];
    };
    ConnectionsGroup: {
      id: string;
      name: string;
    };
    ConnectionsUser: {
      email: string;
      id: string;
      name: string;
    };
    Device: {
      apiKey: string;
      canEdit: boolean;
      canRemove: boolean;
      id: string;
      name: string;
      provider: components["schemas"]["DeviceProvider"];
      rootMountId?: string;
      searchEnabled: boolean;
      /** Format: int64 */
      spaceFree: number;
      /** Format: int64 */
      spaceTotal: number;
      /** Format: int64 */
      spaceUsed: number;
      status: string;
      /** Format: int32 */
      version: number;
    };
    DeviceCreate: {
      name: string;
    };
    DeviceProvider: {
      data: {
        [key: string]: string | undefined;
      };
      name: string;
    };
    DeviceSearch: {
      enabled: boolean;
    };
    Devices: {
      devices: components["schemas"]["Device"][];
    };
    Files: {
      files: components["schemas"]["FilesFile"][];
    };
    FilesCopy: {
      ifHash?: string;
      /** Format: int64 */
      ifModified?: number;
      /** Format: int64 */
      ifSize?: number;
      /** Format: int64 */
      modified?: number;
      toMountId: string;
      toPath: string;
    };
    FilesCopyResult: {
      name: string;
    };
    FilesCreateResult: {
      name: string;
    };
    FilesExternalStatus: {
      status: string;
    };
    FilesFile: {
      contentType: string;
      hash?: string;
      /** Format: int64 */
      modified: number;
      name: string;
      /** Format: int64 */
      size: number;
      tags: {
        [key: string]: string[] | undefined;
      };
      type: string;
    };
    FilesFolderCreate: {
      name: string;
    };
    FilesGetLink: {
      link: string;
    };
    /**
     * @description FilesListRecursiveItem represents recursive file list item.
     * @example {
     *       "file": {
     *         "contentType": "text/plain",
     *         "hash": "2eedb741f199ecc19f1ba815d3d9914d",
     *         "modified": 1494936799097,
     *         "name": "file.txt",
     *         "size": 36494,
     *         "tags": {},
     *         "type": "file"
     *       },
     *       "path": "/path/to/file.txt",
     *       "type": "file"
     *     }
     */
    FilesListRecursiveItem: {
      error?: components["schemas"]["ApiErrorDetails"];
      file?: components["schemas"]["FilesFile"];
      /**
       * @description Path of the file.
       * @example /path/to/file.txt
       */
      path?: string;
      /**
       * @description Type is the type of the item.
       * @example file
       * @enum {string}
       */
      type: "file" | "error";
    };
    FilesMove: {
      ifHash?: string;
      /** Format: int64 */
      ifModified?: number;
      /** Format: int64 */
      ifSize?: number;
      toMountId: string;
      toPath: string;
    };
    FilesMoveResult: {
      name: string;
    };
    FilesRemove: {
      version?: string;
    };
    FilesRename: {
      name: string;
    };
    FilesTagsAdd: {
      tags: {
        [key: string]: string[] | undefined;
      };
    };
    FilesTagsRemove: {
      tags: {
        [key: string]: string[] | undefined;
      };
    };
    FilesTagsSet: {
      ifHash?: string;
      /** Format: int64 */
      ifModified?: number;
      ifOldTags?: {
        [key: string]: string[] | undefined;
      };
      /** Format: int64 */
      ifSize?: number;
      tags: {
        [key: string]: string[] | undefined;
      };
    };
    FilesUploadLink: {
      link: string;
    };
    FilesVersion: {
      contentType: string;
      id: string;
      /** Format: int64 */
      modified: number;
      /** Format: int64 */
      size: number;
      tags: {
        [key: string]: string[] | undefined;
      };
      type: string;
    };
    FilesVersions: {
      versions: components["schemas"]["FilesVersion"][];
    };
    FilesVersionsRecover: {
      newPath: string;
    };
    Group: {
      account?: components["schemas"]["GroupAccount"];
      branding: components["schemas"]["GroupBranding"];
      common?: components["schemas"]["GroupCommon"];
      id: string;
      name: string;
      permissions: {
        [key: string]: boolean | undefined;
      };
      users: components["schemas"]["GroupUser"][];
    };
    GroupAccount: {
      /** Format: int64 */
      capacityMax: number;
      /** Format: int64 */
      usersMax?: number;
    };
    GroupBranding: {
      backgroundColor?: string;
      foregroundColor?: string;
      logo?: string;
    };
    GroupCommon: {
      /** Format: int64 */
      spaceTotal: number;
      /** Format: int64 */
      spaceUsed: number;
    };
    GroupCommonUpdate: {
      /** Format: int64 */
      spaceTotal: number;
    };
    GroupUser: {
      email: string;
      firstName: string;
      id: string;
      lastName: string;
      permissions: {
        [key: string]: boolean | undefined;
      };
      phoneNumber?: string;
      /** Format: int64 */
      spaceTotal?: number;
      /** Format: int64 */
      spaceUsed?: number;
    };
    GroupUserCreate: {
      email: string;
      permissions?: {
        [key: string]: boolean | undefined;
      };
      /** Format: int64 */
      spaceTotal?: number;
    };
    GroupUserEdit: {
      permissions?: {
        [key: string]: boolean | undefined;
      };
      /** Format: int64 */
      spaceTotal?: number;
    };
    Groups: {
      groups: components["schemas"]["Group"][];
    };
    Job: {
      /** Format: int64 */
      aborted?: number;
      /** Format: int64 */
      created: number;
      id: string;
      parameters: string;
      /** Format: int32 */
      progress: number;
      result: string;
      state: string;
      type: string;
    };
    JobCopy: {
      /**
       * @description ConflictResolution defines how the conflicts are resolved.
       * @enum {string}
       */
      conflictResolution?: "RENAME" | "SKIP";
      files: components["schemas"]["JobMountPathPair"][];
    };
    JobFileDestError: {
      error: components["schemas"]["ApiErrorDetails"];
      file: components["schemas"]["JobMountPathPair"];
    };
    JobFileDestErrors: {
      errors: components["schemas"]["JobFileDestError"][];
    };
    JobMountPath: {
      mountId: string;
      path: string;
    };
    JobMountPathPair: {
      dst: components["schemas"]["JobMountPath"];
      src: components["schemas"]["JobMountPath"];
    };
    JobRemove: {
      files: components["schemas"]["JobMountPath"][];
    };
    JobUndelete: {
      files: components["schemas"]["JobMountPath"][];
    };
    Jobs: {
      jobs: components["schemas"]["Job"][];
    };
    Link: {
      /** Format: int64 */
      counter: number;
      downloadable: boolean;
      hasPassword: boolean;
      hash: string;
      host: string;
      id: string;
      message?: string;
      mountId: string;
      name: string;
      password?: string;
      passwordRequired: boolean;
      passwordRequiredReason?: string;
      path: string;
      shortUrl: string;
      url: string;
      /** Format: int64 */
      validFrom?: number;
      /** Format: int64 */
      validTo?: number;
    };
    LinkCounter: {
      /** Format: int64 */
      counter: number;
    };
    LinkCreate: {
      path: string;
    };
    LinkMessage: {
      message: string;
    };
    LinkSetDownloadable: {
      downloadable: boolean;
    };
    LinkSetHash: {
      hash: string;
    };
    LinkSetPassword: {
      password: string;
    };
    LinkValidity: {
      /** Format: int64 */
      validFrom?: number;
      /** Format: int64 */
      validTo?: number;
    };
    Links: {
      links: components["schemas"]["Link"][];
    };
    LinksBundle: {
      links: components["schemas"]["Link"][];
      mounts: {
        [key: string]: components["schemas"]["Mount"] | undefined;
      };
    };
    Mount: {
      almostOverQuota: boolean;
      canUpload: boolean;
      canWrite: boolean;
      capabilities: components["schemas"]["MountCapabilities"];
      deviceId?: string;
      groups: components["schemas"]["MountGroup"][];
      id: string;
      isDir: boolean;
      isPrimary: boolean;
      isShared: boolean;
      name: string;
      online: boolean;
      origin: string;
      overQuota: boolean;
      owner: components["schemas"]["MountMember"];
      permissions: {
        [key: string]: boolean | undefined;
      };
      root?: components["schemas"]["MountRoot"];
      /** Format: int64 */
      spaceTotal?: number;
      /** Format: int64 */
      spaceUsed?: number;
      type: string;
      /** Format: int64 */
      userAdded: number;
      users: components["schemas"]["MountUser"][];
      /** Format: int32 */
      version: number;
    };
    MountCandidate: {
      email: string;
      groupId: string;
      groupName: string;
      id: string;
      name: string;
    };
    MountCapabilities: {
      externalLinks: boolean;
      externalStatus: boolean;
      officeOnline: boolean;
      rawThumbnails: boolean;
      tags: boolean;
    };
    MountCreate: {
      path: string;
    };
    MountEdit: {
      name: string;
    };
    MountGroup: {
      /** Format: int64 */
      added: number;
      id: string;
      name: string;
      permissions: {
        [key: string]: boolean | undefined;
      };
    };
    MountGroupCreate: {
      permissions: {
        [key: string]: boolean | undefined;
      };
    };
    MountMember: {
      /** Format: int64 */
      added: number;
      email?: string;
      id: string;
      isGroup: boolean;
      name: string;
      permissions: {
        [key: string]: boolean | undefined;
      };
    };
    MountRoot: {
      id: string;
      name: string;
      path: string;
    };
    MountSnapshots: {
      mountId: string;
      mountName: string;
      /** Format: int64 */
      mountSpaceTotal: number;
      snapshots: components["schemas"]["Snapshot"][];
    };
    MountUser: {
      /** Format: int64 */
      added: number;
      email: string;
      id: string;
      name: string;
      permissions: {
        [key: string]: boolean | undefined;
      };
    };
    MountUserCreate: {
      email?: string;
      id?: string;
      permissions: {
        [key: string]: boolean | undefined;
      };
    };
    MountUserEdit: {
      permissions: {
        [key: string]: boolean | undefined;
      };
    };
    Mounts: {
      mounts: components["schemas"]["Mount"][];
    };
    MountsSnapshots: {
      mounts: components["schemas"]["MountSnapshots"][];
    };
    Places: {
      places: components["schemas"]["Mount"][];
    };
    Profile: {
      base: string;
      name: string;
      /** Format: int32 */
      version: number;
    };
    Receiver: {
      alert: boolean;
      /** Format: int64 */
      counter: number;
      hasPassword: boolean;
      hash: string;
      host: string;
      id: string;
      mailUploadAddress?: string;
      message?: string;
      mountId: string;
      name: string;
      password?: string;
      passwordRequiredReason?: string;
      path: string;
      shortUrl: string;
      url: string;
      /** Format: int64 */
      validFrom?: number;
      /** Format: int64 */
      validTo?: number;
    };
    ReceiverCreate: {
      path: string;
    };
    ReceiverMessage: {
      message: string;
    };
    ReceiverSetAlert: {
      alert: boolean;
    };
    ReceiverSetHash: {
      hash: string;
    };
    ReceiverSetPassword: {
      password: string;
    };
    ReceiverValidity: {
      /** Format: int64 */
      validFrom?: number;
      /** Format: int64 */
      validTo?: number;
    };
    Receivers: {
      receivers: components["schemas"]["Receiver"][];
    };
    ReceiversBundle: {
      mounts: {
        [key: string]: components["schemas"]["Mount"] | undefined;
      };
      receivers: components["schemas"]["Receiver"][];
    };
    SearchHit: {
      contentType: string;
      link?: components["schemas"]["Link"];
      /** Format: int64 */
      modified: number;
      mount?: components["schemas"]["Mount"];
      mountId: string;
      name: string;
      path: string;
      receiver?: components["schemas"]["Receiver"];
      /** Format: double */
      score: number;
      /** Format: int64 */
      size: number;
      tags: {
        [key: string]: string[] | undefined;
      };
      type: string;
      vaultRepo?: components["schemas"]["BundleVaultRepo"];
    };
    SearchResult: {
      hits: components["schemas"]["SearchHit"][];
      mounts: {
        [key: string]: components["schemas"]["Mount"] | undefined;
      };
    };
    SettingsLanguage: {
      officeOnlineDataLocale?: string;
      officeOnlineLocale?: string;
      preferred?: string;
    };
    SettingsNotifications: {
      deviceOffline: boolean;
      newComment: boolean;
      shared: boolean;
    };
    SettingsSecurity: {
      downloadLinkAutoPassword: boolean;
      downloadLinkRequirePassword: boolean;
      uploadLinkAutoPassword: boolean;
      uploadLinkRequirePassword: boolean;
    };
    SettingsSeen: {
      desktop?: boolean;
      intro?: boolean;
      officeOnline?: boolean;
    };
    Shared: {
      files: components["schemas"]["SharedFile"][];
    };
    SharedFile: {
      contentType: string;
      link?: components["schemas"]["Link"];
      /** Format: int64 */
      modified: number;
      mount: components["schemas"]["Mount"];
      name: string;
      receiver?: components["schemas"]["Receiver"];
      /** Format: int64 */
      size: number;
      type: string;
    };
    Snapshot: {
      /** Format: int64 */
      created: number;
      /** Format: int64 */
      files: number;
      name: string;
      /** Format: int64 */
      size: number;
      state: string;
    };
    Trash: {
      files: components["schemas"]["TrashFile"][];
      mounts: {
        [key: string]: components["schemas"]["Mount"] | undefined;
      };
      pageInfo: components["schemas"]["TrashPageInfo"];
      /** Format: int32 */
      retentionDays: number;
    };
    TrashFile: {
      contentType: string;
      /** Format: int64 */
      deleted: number;
      mountId: string;
      name: string;
      path: string;
      /** Format: int64 */
      size: number;
      tags: {
        [key: string]: string[] | undefined;
      };
      versionId: string;
    };
    TrashPageInfo: {
      cursor?: string;
    };
    /** @description User represents the user structure. */
    User: {
      email: string;
      firstName: string;
      hasPassword: boolean;
      /**
       * @description Id is the unique id of the user.
       * @example 12341234-1234-1234-1234-123412341234
       */
      id: string;
      lastName: string;
      /** Format: int32 */
      level: number;
      phoneNumber?: string;
    };
    /** @description UserAttributes represents user attributes. By default it has only hasCloud property but it might return others. */
    UserAttributes: {
      hasCloud: boolean;
    };
    UserChangeEmail: {
      newEmail: string;
    };
    UserChangePassword: {
      newPassword: string;
      oldPassword?: string;
    };
    /** @description UserEdit represents the user edit structure. */
    UserEdit: {
      firstName: string;
      lastName: string;
    };
    UserInfo: {
      email: string;
      id: string;
      name: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  applicationsList: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["AppInstances"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  applicationsRevoke: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        clientId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  basicConfig: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["BasicConfig"];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  changelog: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Changelog"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  changelogOpened: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["ChangelogOpened"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Changelog"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  changelogSeen: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["ChangelogSeen"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Changelog"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  devices: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Devices"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  devicesNew: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["DeviceCreate"];
      };
    };
    responses: {
      /** @description Success */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Device"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  devicesDetails: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        deviceId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Device"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  devicesEdit: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        deviceId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  devicesDelete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        deviceId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  devicesReauth: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        deviceId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Redirect */
      303: {
        headers: {
          /** @description Redirect location */
          Location?: string;
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  devicesEditSearch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        deviceId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["DeviceSearch"];
      };
    };
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  groups: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Groups"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  groupsDetails: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        groupId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Group"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  groupsAttributes: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        groupId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": Record<string, never>;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  groupsBrandingLogoRemove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        groupId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  groupsCommonEdit: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        groupId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["GroupCommonUpdate"];
      };
    };
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  groupsUsersAdd: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        groupId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["GroupUserCreate"];
      };
    };
    responses: {
      /** @description Success */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["GroupUser"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  groupsUsersEdit: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        groupId: string;
        groupUserId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["GroupUserEdit"];
      };
    };
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  groupsUsersRemove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        groupId: string;
        groupUserId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  jobs: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Jobs"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  jobsRemoveCompleted: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  jobsFilesCopy: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["JobCopy"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Job"];
        };
      };
      /** @description Nothing to do. This can occur when all items have conflict and the conflict resolution is SKIP. */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid request data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Some job items failed checks */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["JobFileDestErrors"];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  jobsFilesImportLink: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["JobCopy"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Job"];
        };
      };
      /** @description Invalid request data, Link not found or Invalid password */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  jobsFilesMove: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["JobCopy"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Job"];
        };
      };
      /** @description Nothing to do. This can occur when all items have conflict and the conflict resolution is SKIP. */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid request data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Some job items failed checks */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["JobFileDestErrors"];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  jobsFilesRemove: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["JobRemove"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Job"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  jobsFilesRestoreSnapshot: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["JobCopy"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Job"];
        };
      };
      /** @description Invalid request data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  jobsDetails: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        jobId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Job"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  jobsRemove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        jobId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  jobsAbort: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        jobId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Job"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  linksAll: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["LinksBundle"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  mounts: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Mounts"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  mountsDetails: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Mount"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Mount not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  mountsEdit: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["MountEdit"];
      };
    };
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid request body */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Mount not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  mountsDelete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Mount not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  bundle: {
    parameters: {
      query: {
        path: string;
      };
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Bundle"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  comments: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Comments"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  commentsNew: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["CommentCreate"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Comment"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  commentsRange: {
    parameters: {
      query: {
        from: number;
        limit: number;
      };
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Comments"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  commentsDetails: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        commentId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Comment"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  commentsDelete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        commentId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesCopy: {
    parameters: {
      query: {
        path: string;
      };
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["FilesCopy"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["FilesCopyResult"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesCreate: {
    parameters: {
      query: {
        path: string;
      };
      header?: never;
      path: {
        mountId: string;
        template: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["FilesCreateResult"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesGetLink: {
    parameters: {
      query: {
        path: string;
      };
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["FilesGetLink"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesExternal: {
    parameters: {
      query: {
        path: string;
      };
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Redirect */
      303: {
        headers: {
          /** @description Redirect location */
          Location?: string;
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesExternalStatus: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["FilesExternalStatus"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesFolderNew: {
    parameters: {
      query: {
        path: string;
      };
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["FilesFolderCreate"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesGet: {
    parameters: {
      query: {
        path: string;
      };
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Redirect */
      303: {
        headers: {
          /** @description Redirect location */
          Location?: string;
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesInfo: {
    parameters: {
      query: {
        path: string;
      };
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["FilesFile"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesList: {
    parameters: {
      query: {
        path: string;
      };
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Files"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesMove: {
    parameters: {
      query: {
        path: string;
      };
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["FilesMove"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["FilesMoveResult"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesRemove: {
    parameters: {
      query: {
        path: string;
      };
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["FilesRemove"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesRename: {
    parameters: {
      query: {
        path: string;
      };
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["FilesRename"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesTagsAdd: {
    parameters: {
      query: {
        path: string;
      };
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["FilesTagsAdd"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesTagsRemove: {
    parameters: {
      query: {
        path: string;
      };
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["FilesTagsRemove"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesTagsSet: {
    parameters: {
      query: {
        path: string;
      };
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["FilesTagsSet"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesUpload: {
    parameters: {
      query: {
        path: string;
      };
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["FilesUploadLink"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesVersions: {
    parameters: {
      query: {
        path: string;
      };
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["FilesVersions"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesChangeVersion: {
    parameters: {
      query: {
        path: string;
        version: string;
      };
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesVersionsRecover: {
    parameters: {
      query: {
        path: string;
        version: string;
      };
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["FilesVersionsRecover"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  mountsGroupsAdd: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        mountGroupId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["MountGroupCreate"];
      };
    };
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid request body or mount or group does not exist */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  mountsGroupsRemove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        mountGroupId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Mount or user does not exist */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  links: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Links"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  linksCreate: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["LinkCreate"];
      };
    };
    responses: {
      /** @description Success */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Link"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Limit exceeded */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  linksDetails: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        linkId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Link"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  linksDelete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        linkId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  linksCounter: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        linkId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["LinkCounter"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  linksSetDownloadable: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        linkId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["LinkSetDownloadable"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Link"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  linksSetMessage: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        linkId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["LinkMessage"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Link"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  linksRemovePassword: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        linkId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Link"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  linksResetPassword: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        linkId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Link"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  linksSetPassword: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        linkId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["LinkSetPassword"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Link"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  linksQr: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        linkId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  linksSetUrlHash: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        linkId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["LinkSetHash"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Link"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  linksSetValidity: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        linkId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["LinkValidity"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Link"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Limit exceeded */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  mountsReauth: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Redirect */
      303: {
        headers: {
          /** @description Redirect location */
          Location?: string;
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Mount does not exist or not mount owner */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  receivers: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Receivers"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  receiversCreate: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["ReceiverCreate"];
      };
    };
    responses: {
      /** @description Success */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Receiver"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Limit exceeded */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  receiversDetails: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        receiverId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Receiver"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  receiversDelete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        receiverId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  receiversSetAlert: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        receiverId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["ReceiverSetAlert"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Receiver"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  receiversSetMessage: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        receiverId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["ReceiverMessage"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Receiver"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  receiversRemovePassword: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        receiverId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Receiver"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  receiversResetPassword: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        receiverId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Receiver"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  receiversSetPassword: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        receiverId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["ReceiverSetPassword"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Receiver"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  receiversQr: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        receiverId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  receiversSetUrlHash: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        receiverId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["ReceiverSetHash"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Receiver"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  receiversSetValidity: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        receiverId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["ReceiverValidity"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Receiver"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Limit exceeded */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  mountsSubmountsCreate: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["MountCreate"];
      };
    };
    responses: {
      /** @description Success */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Mount"];
        };
      };
      /** @description Invalid request body, mount or path does not exist */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  mountsUsersAdd: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["MountUserCreate"];
      };
    };
    responses: {
      /** @description Success */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["MountUser"];
        };
      };
      /** @description Invalid request body or mount does not exist */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Multiple users with same email found */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["MountCandidate"][];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  mountsUsersEdit: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        mountUserId: string;
      };
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["MountUserEdit"];
      };
    };
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid request body or mount or user does not exist */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  mountsUsersRemove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
        mountUserId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Mount or user does not exist */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  places: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Places"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  receiversAll: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ReceiversBundle"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  search: {
    parameters: {
      query?: {
        /**
         * @description Search query term
         * @example lorem ipsum
         */
        query?: string;
        /**
         * @description Pagination offset (default: 0)
         * @example 0
         */
        offset?: number;
        /**
         * @description Max number of search results (default: 256, max: 1000)
         * @example 256
         */
        limit?: number;
        /**
         * @description Sort field name
         * @example name
         */
        sortField?: "name" | "type" | "size" | "modified" | "contentType";
        /**
         * @description Sort direction (default: asc)
         * @example asc
         */
        sortDir?: "asc" | "desc";
        /**
         * @description Filter by mount ID
         * @example 12341234-1234-1234-1234-123412341234
         */
        mountId?: string;
        /**
         * @description Filter by path (`mountId` is required if `path` is specified)
         * @example /example/path
         */
        path?: string;
        /**
         * @description Filter by content type / mime type
         * @example text/plain
         */
        contentType?: string;
        /**
         * @description Filter by file type
         * @example file
         */
        fileType?:
          | "file"
          | "folder"
          | "pdf"
          | "document"
          | "sheet"
          | "presentation"
          | "archive"
          | "code"
          | "text"
          | "audio"
          | "video"
          | "image";
        /**
         * @description Filter by tag value (key=value pairs)
         * @example priority=low
         */
        tag?: string[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["SearchResult"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  shared: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Shared"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  sharedDetails: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["SharedFile"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  snapshots: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["MountsSnapshots"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  trash: {
    parameters: {
      query?: {
        /** @description Page cursor */
        cursor?: string;
        /**
         * @description Max number of items per page
         * @example 256
         */
        pageSize?: number;
        /**
         * @description Sort field name
         * @example name
         */
        sortField?: "name" | "path" | "size" | "deleted";
        /**
         * @description Sort direction (default: asc)
         * @example asc
         */
        sortDir?: "asc" | "desc";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Trash"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  trashEmpty: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Job"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  trashUndelete: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Specific files can be undeleted by providing their mount ID and paths. If the files list is empty, all files will be undeleted. */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["JobUndelete"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Job"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  user: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["User"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  userEdit: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description New user's info */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["UserEdit"];
      };
    };
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  activity: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Activity"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  userAppConfig: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["AppConfig"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  appPasswordsList: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["AppPasswords"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  appPasswordsGenerate: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["AppPasswordGenerate"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["AppPassword"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  appPasswordsRevoke: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        apwId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  userAttributes: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["UserAttributes"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  userAuthenticated: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  bookmarks: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Bookmarks"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  bookmarksEdit: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["Bookmarks"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Bookmarks"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  bookmarksCreate: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["Bookmark"];
      };
    };
    responses: {
      /** @description Success */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  bookmarksRemove: {
    parameters: {
      query: {
        mountId: string;
        path: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bookmark not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  userChangeEmail: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["UserChangeEmail"];
      };
    };
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  connections: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Connections"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  userChangePassword: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description TODO */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["UserChangePassword"];
      };
    };
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  brandingLogoRemove: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  settingsLanguage: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["SettingsLanguage"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  settingsLanguageEdit: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description New settings */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["SettingsLanguage"];
      };
    };
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  settingsNotifications: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["SettingsNotifications"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  settingsNotificationsEdit: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description New settings */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["SettingsNotifications"];
      };
    };
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  settingsSecurity: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["SettingsSecurity"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  settingsSecurityEdit: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description New settings */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["SettingsSecurity"];
      };
    };
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  settingsSeen: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["SettingsSeen"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  settingsSeenEdit: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description New settings */
    requestBody?: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["SettingsSeen"];
      };
    };
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesContentFilesGetMulti: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description A list of mountId:path pairs of the files to be included in the ZIP archive. Max body size is 10 MB. */
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /**
           * @description A list of `mountId:path` pairs
           * @example [
           *       "11111111-1111-1111-1111-111111111111:/example/path1",
           *       "22222222-2222-2222-2222-222222222222:/example/path2"
           *     ]
           */
          files?: string[];
        };
      };
    };
    responses: {
      /** @description File */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesContentFilesGetMultiName: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        name: string;
      };
      cookie?: never;
    };
    /** @description A list of `mountId:path` pairs of the files to be included in the ZIP archive. Max body size is 10 MB. */
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /**
           * @description A list of `mountId:path` pairs
           * @example [
           *       "11111111-1111-1111-1111-111111111111:/example/path1",
           *       "22222222-2222-2222-2222-222222222222:/example/path2"
           *     ]
           */
          files?: string[];
        };
      };
    };
    responses: {
      /** @description File */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  groupsContentGroupsBrandingLogo: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        groupId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description File */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  groupsContentGroupsBrandingLogoUpdate: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        groupId: string;
      };
      cookie?: never;
    };
    /** @description New branding logo file */
    requestBody?: {
      content: {
        "application/octet-stream": string;
        "multipart/form-data": {
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["FilesFile"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesContentFilesGet: {
    parameters: {
      query: {
        path: string;
        /**
         * @description Forces the web browsers to download the file. Adds the `Content-Disposition: attachment; filename="file.txt"; filename*=UTF-8''file.txt` header.
         * @example true
         */
        force?: boolean;
      };
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description File */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesContentFilesGetPost: {
    parameters: {
      query: {
        path: string;
        /**
         * @description Forces the web browsers to download the file. Adds the `Content-Disposition: attachment; filename="file.txt"; filename*=UTF-8''file.txt` header.
         * @example true
         */
        force?: boolean;
      };
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    /** @description A list of names of the files to be included in the ZIP archive. Filtered folders will include their children. Max body size is 10 MB. */
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /**
           * @description A list of names to include
           * @example [
           *       "file.txt",
           *       "folder1",
           *       "folder2"
           *     ]
           */
          files?: string[];
        };
      };
    };
    responses: {
      /** @description File */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesContentFilesGetName: {
    parameters: {
      query: {
        path: string;
        /**
         * @description Forces the web browsers to download the file. Adds the `Content-Disposition: attachment; filename="file.txt"; filename*=UTF-8''file.txt` header.
         * @example true
         */
        force?: boolean;
      };
      header?: never;
      path: {
        mountId: string;
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description File */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesContentFilesGetNamePost: {
    parameters: {
      query: {
        path: string;
        /**
         * @description Forces the web browsers to download the file. Adds the `Content-Disposition: attachment; filename="file.txt"; filename*=UTF-8''file.txt` header.
         * @example true
         */
        force?: boolean;
      };
      header?: never;
      path: {
        mountId: string;
        name: string;
      };
      cookie?: never;
    };
    /** @description A list of names of the files to be included in the ZIP archive. Filtered folders will include their children. Max body size is 10 MB. */
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /**
           * @description A list of names to include
           * @example [
           *       "file.txt",
           *       "folder1",
           *       "folder2"
           *     ]
           */
          files?: string[];
        };
      };
    };
    responses: {
      /** @description File */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesContentFilesListRecursive: {
    parameters: {
      query: {
        path: string;
      };
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Newline-delimited JSON files */
      200: {
        headers: {
          /** @description Chunked encoding */
          "Transfer-Encoding"?: "chunked";
          [name: string]: unknown;
        };
        content: {
          "application/x-ndjson; charset=utf-8": components["schemas"]["FilesListRecursiveItem"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  filesContentFilesPut: {
    parameters: {
      query: {
        path: string;
        /**
         * @description Name of the uploaded file. If this parameter is not set and multipart body is used, the file name from the multipart body will be used (this parameter takes precedence). If raw request body is used this parameter is required.
         * @example file.txt
         */
        filename?: string;
        /**
         * @description Return full file info (`FilesFile`) in the response.
         * @example true
         */
        info?: boolean;
        /**
         * @description Overwrite an existing file.
         * @example false
         */
        overwrite?: boolean;
        /**
         * @description Overwrite an existing file if modified matches.
         * @example 1614877008000
         */
        overwriteIfModified?: number;
        /**
         * @description Overwrite an existing file if size matches.
         * @example 42
         */
        overwriteIfSize?: number;
        /**
         * @description Overwrite an existing file if hash matches.
         * @example 1a79a4d60de6718e8e5b326e338ae533
         */
        overwriteIfHash?: string;
        /**
         * @description Overwrite an existing file if other parameters match (e.g. overWriteIfModified) but create a new file if the old one does not exist.
         * @example false
         */
        overwriteIgnoreNonexistent?: boolean;
        /**
         * @description Overwrite an existing file.
         * @example false
         */
        autorename?: boolean;
        /**
         * @description Set custom value for modified. Current time by default.
         * @example 1614877008000
         */
        modified?: number;
        /**
         * @description Tags for the new file. Format: key=value
         * @example description=File description
         */
        tags?: string[];
      };
      header?: never;
      path: {
        mountId: string;
      };
      cookie?: never;
    };
    /** @description File */
    requestBody?: {
      content: {
        "application/octet-stream": string;
        "multipart/form-data": {
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["FilesFile"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  userProfilePictureContentProfilePicture: {
    parameters: {
      query?: {
        /**
         * @description Controls whether the response contains the default profile picture or 404 not found in case the user does not have a custom profile picture set.
         * @example true
         */
        nodefault?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description File */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  userProfilePictureContentProfilePictureUpdate: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description New profile picture file */
    requestBody?: {
      content: {
        "application/octet-stream": string;
        "multipart/form-data": {
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["FilesFile"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  brandingContentBrandingLogo: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description File */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  brandingContentBrandingLogoUpdate: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description New branding logo file */
    requestBody?: {
      content: {
        "application/octet-stream": string;
        "multipart/form-data": {
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["FilesFile"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  usersProfilePictureContentProfilePicture: {
    parameters: {
      query?: {
        /**
         * @description Controls whether the response contains the default profile picture or 404 not found in case the user does not have a custom profile picture set.
         * @example true
         */
        nodefault?: boolean;
      };
      header?: never;
      path: {
        userId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description File */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  clientIp: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Client's IP address (without trailing new line) */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  oauth2DeviceCode: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  oauth2Token: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
  profile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["Profile"];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["ApiError"];
        };
      };
    };
  };
}
